function [eqns, grad] = generatedEquations(inputVariables, extraParams)
% GENERATEDEQUATIONS Compute equation values.
% 
% This function computes the value of the equations.
% Update the generated code to add the equation gradient computation.
% 
% [EQNS] = generatedEquations(INPUTVARIABLES, EXTRAPARAMS) computes the
% value of the equations EQNS at the point INPUTVARIABLES, using the extra
% parameters in EXTRAPARAMS.
% 
% [EQNS, GRAD] = generatedEquations(INPUTVARIABLES, EXTRAPARAMS)
% additionally computes the equation gradient value GRAD at the current
% point.
% 
% Auto-generated by prob2struct on 20-Apr-2020 14:56:56
% 
% 

%% Variable indices.
idx_f = 1:2;
idx_x = 3:5;

%% Map solver-based variables to problem-based.
f = inputVariables(idx_f);
f = f(:)';
x = inputVariables(idx_x);
x = x(:)';


%% Insert gradient calculation here.
% If you include a gradient, notify the solver by setting the
% SpecifyObjectiveGradient option to true.
if nargout > 1
    grad = [];
end

eqns = zeros(5,1);
arg1 = zeros([5, 1]);
arg1(1) = (((f(1) .* cos(x(1))) .* (-1)) + (f(2) .* cos(x(2))));
arg1(2) = (((f(1) .* sin(x(1))) + (f(2) .* sin(x(2)))) - extraParams{1});
arg14 = ((f(2) .* cos(x(2))) .* ((cos(x(3)) .* extraParams{2}) + (sin(x(3)) .* extraParams{3})));
arg19 = ((f(1) .* cos(x(1))) .* ((cos(x(3)) .* extraParams{4}) - (sin(x(3)) .* extraParams{5})));
arg24 = ((f(1) .* sin(x(1))) .* ((cos(x(3)) .* extraParams{6}) + (sin(x(3)) .* extraParams{7})));
arg29 = ((f(2) .* sin(x(2))) .* ((cos(x(3)) .* extraParams{8}) - (sin(x(3)) .* extraParams{9})));
arg1(3) = (((arg19 - (arg14 .* 1)) - (arg24 .* 1)) + arg29);
arg33 = (((cos(x(3)) .* extraParams{10}) + (cos(x(1)) .* extraParams{11})) + (cos(x(2)) .* extraParams{12}));
arg1(4) = (arg33 - extraParams{13});
arg1(5) = (((sin(x(3)) .* extraParams{14}) - (sin(x(1)) .* extraParams{15})) + (sin(x(2)) .* extraParams{16}));
optim_problemdef_LHS = arg1(:);
optim_problemdef_RHS = extraParams{17};

eqns(1:5) = optim_problemdef_LHS - optim_problemdef_RHS;


end